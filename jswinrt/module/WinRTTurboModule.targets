<!--
***********************************************************************************************
Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <!-- Only do this for MSBuild versions below 16.0
             as it is since done automatically, see https://github.com/microsoft/msbuild/pull/3605-->
        <MSBuildAllProjects Condition="'$(MSBuildToolsVersion)'  &lt;= '15'">$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <JsWinRTVerbosity Condition="'$(JsWinRTVerbosity)' == ''">normal</JsWinRTVerbosity>
        <JsWinRTCommandVerbosity Condition="'$(JsWinRTVerbosity)' == 'high'">-verbose</JsWinRTCommandVerbosity>
        <Error Condition="'$(JsWinRTPath)' == ''">JsWinRTPath not specified!</Error>

        <GeneratedFilesDir Condition="'$(GeneratedFilesDir)' == ''">$(IntDir)Generated Files\</GeneratedFilesDir>
        <TsOutDir Condition="'$(TsOutDir)' == ''">$(GeneratedFilesDir)types\</TsOutDir>

        <JsWinRTTarget Condition="'$(JsWinRTTarget)' == ''">ReactNative</JsWinRTTarget>

        <!-- Note: Before* targets run before Compute* targets. -->
        <BeforeClCompileTargets Condition="'$(JsWinRTTarget)' == 'ReactNative'">
            $(BeforeClCompileTargets);RnWinRTMakeProjections;
        </BeforeClCompileTargets>
        <BuildDependsOn Condition="'$(JsWinRTTarget)' == 'ReactNative'">
            RnWinRTAddGeneratedCppFiles;
            $(BuildDependsOn)
        </BuildDependsOn>
    </PropertyGroup>

    <Target Name="GetJsWinRTPlatformWinMDInputs"
            DependsOnTargets="ResolveAssemblyReferences;GetJsWinRTPlatformWinMDReferences"
            Returns="@(JsWinRTWinMDInputs)">
        <ItemGroup>
            <_JsWinRTWinMDInputs Remove="@(_JsWinRTWinMDInputs)" />
            <_JsWinRTWinMDInputs Include="@(JsWinRTPlatformWinMDReferences)" />
            <JsWinRTWinMDInputs Include="@(_JsWinRTWinMDInputs)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </JsWinRTWinMDInputs>
        </ItemGroup>
        <Message Text="JsWinRTWinMDInputs: @(JsWinRTWinMDInputs->'%(WinMDPath)')" Importance="$(JsWinRTVerbosity)"/>
    </Target>

    <!--Define platform WinMD references for modern IDL compilation-->
    <Target Name="GetJsWinRTPlatformWinMDReferences"
            DependsOnTargets="ResolveAssemblyReferences;$(GetJsWinRTPlatformWinMDReferencesDependsOn)"
            Returns="@(JsWinRTPlatformWinMDReferences)">
        <ItemGroup>
            <_JsWinRTPlatformWinMDReferences Remove="@(_JsWinRTPlatformWinMDReferences)" />
            <_JsWinRTPlatformWinMDReferences Include="@(ReferencePath)" Condition="'%(ReferencePath.IsSystemReference)' == 'true' and '%(ReferencePath.WinMDFile)' == 'true' and '%(ReferencePath.ReferenceSourceTarget)' == 'ResolveAssemblyReference'" />
            <_JsWinRTPlatformWinMDReferences Condition="'$(JsWinRTOverrideSDKReferences)' != 'true'" Include="$(WindowsSDK_MetadataPathVersioned)\**\Windows.Foundation.FoundationContract.winmd" />
            <_JsWinRTPlatformWinMDReferences Condition="'$(JsWinRTOverrideSDKReferences)' != 'true'" Include="$(WindowsSDK_MetadataPathVersioned)\**\Windows.Foundation.UniversalApiContract.winmd" />
            <_JsWinRTPlatformWinMDReferences Condition="'$(JsWinRTOverrideSDKReferences)' != 'true'" Include="$(WindowsSDK_MetadataPathVersioned)\**\Windows.Networking.Connectivity.WwanContract.winmd" />
            <_JsWinRTPlatformWinMDReferences Include="$(JsWinRTSDKReferences)" />
            <JsWinRTPlatformWinMDReferences Remove="@(JsWinRTPlatformWinMDReferences)"/>
            <JsWinRTPlatformWinMDReferences Include="@(_JsWinRTPlatformWinMDReferences->'%(FullPath)'->Distinct())">
                <WinMDPath>%(FullPath)</WinMDPath>
            </JsWinRTPlatformWinMDReferences>
        </ItemGroup>
        <Message Text="JsWinRTPlatformWinMDReferences: @(JsWinRTPlatformWinMDReferences->'%(WinMDPath)')" Importance="$(JsWinRTVerbosity)"/>
    </Target>

    <!--Get direct WinMD references (including Nuget packages) for projections, IDL processing, and AppX packaging-->
    <Target Name="GetJsWinRTDirectWinMDReferences"
            DependsOnTargets="ResolveAssemblyReferences;$(GetJsWinRTDirectWinMDReferencesDependsOn)"
            Returns="@(JsWinRTDirectWinMDReferences)">
        <ItemGroup>
            <_JsWinRTDirectWinMDReferences Remove="@(_JsWinRTDirectWinMDReferences)" />
            <_JsWinRTDirectWinMDReferences Include="@(ReferencePath)" Condition="'%(ReferencePath.IsSystemReference)' != 'true' and '%(ReferencePath.WinMDFile)' == 'true' and '%(ReferencePath.ReferenceSourceTarget)' == 'ResolveAssemblyReference'" />
            <JsWinRTDirectWinMDReferences Remove="@(JsWinRTDirectWinMDReferences)"/>
            <JsWinRTDirectWinMDReferences Include="@(_JsWinRTDirectWinMDReferences)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </JsWinRTDirectWinMDReferences>
        </ItemGroup>
        <Message Text="JsWinRTDirectWinMDReferences: @(JsWinRTDirectWinMDReferences->'%(WinMDPath)')" Importance="$(JsWinRTVerbosity)"/>
    </Target>

    <!--Get direct WinMD project references for projections, IDL processing, and AppX packaging-->
    <Target Name="GetJsWinRTProjectWinMDReferences"
            DependsOnTargets="ResolveProjectReferences;$(GetJsWinRTProjectWinMDReferencesDependsOn)"
            Returns="@(JsWinRTStaticProjectWinMDReferences);@(JsWinRTDynamicProjectWinMDReferences)">
        <ItemGroup>
            <!-- Get static library project references -->
            <_JsWinRTStaticProjectReferences Remove="@(_JsWinRTStaticProjectReferences)"/>
            <_JsWinRTStaticProjectReferences Include="@(_ResolvedProjectReferencePaths)"
                Condition= "'%(_ResolvedProjectReferencePaths.ProjectType)'=='StaticLibrary' AND
                    '%(_ResolvedProjectReferencePaths.WinMDFile)' == 'true'"/>
            <!--Get dynamic library project references-->
            <_JsWinRTDynamicProjectReferences Remove="@(_JsWinRTDynamicProjectReferences)"/>
            <_JsWinRTDynamicProjectReferences Include="@(_ResolvedProjectReferencePaths)"
                Condition= "'%(_ResolvedProjectReferencePaths.ProjectType)'!='StaticLibrary' AND
                ('%(_ResolvedProjectReferencePaths.WinMDFile)' == 'true' OR
                    ('%(_ResolvedProjectReferencePaths.WinMDFile)' == '' AND '%(_ResolvedProjectReferencePaths.Extension)' == '.winmd'))"/>
        </ItemGroup>
        <ItemGroup>
            <JsWinRTStaticProjectWinMDReferences Remove="@(JsWinRTStaticProjectWinMDReferences)" />
            <JsWinRTStaticProjectWinMDReferences Include="@(_JsWinRTStaticProjectReferences)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </JsWinRTStaticProjectWinMDReferences>
            <JsWinRTDynamicProjectWinMDReferences Remove="@(JsWinRTDynamicProjectWinMDReferences)" />
            <JsWinRTDynamicProjectWinMDReferences Include="@(_JsWinRTDynamicProjectReferences)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </JsWinRTDynamicProjectWinMDReferences>
        </ItemGroup>
        <Message Text="JsWinRTStaticProjectWinMDReferences: @(JsWinRTStaticProjectWinMDReferences->'%(WinMDPath)')" Importance="$(JsWinRTVerbosity)"/>
        <Message Text="JsWinRTDynamicProjectWinMDReferences: @(JsWinRTDynamicProjectWinMDReferences->'%(WinMDPath)')" Importance="$(JsWinRTVerbosity)"/>
    </Target>

    <Target Name="JsWinRTMakeRsp"
            DependsOnTargets="GetJsWinRTPlatformWinMDInputs;GetJsWinRTPlatformWinMDReferences;GetJsWinRTDirectWinMDReferences;GetJsWinRTProjectWinMDReferences;$(GetJsWinRTProjectWinMDReferences);$(JsWinRTMakePlatformProjectionDependsOn)"
            Inputs="$(JsWinRTParameters);@(JsWinRTWinMDInputs)"
            Outputs="$(IntDir)jswinrt.rsp">
        <ItemGroup>
            <_JswinrtInputs Remove="@(_JswinrtInputs)"/>
            <_JswinrtInputs Include="@(JsWinRTWinMDInputs)"/>
            <_JswinrtInputs Include="@(JsWinRTPlatformWinMDReferences)"/>
            <_JswinrtInputs Include="@(JsWinRTDirectWinMDReferences)"/>
            <_JswinrtInputs Include="@(JsWinRTStaticProjectWinMDReferences)"/>
            <_JswinrtInputs Include="@(JsWinRTDynamicProjectWinMDReferences)"/>
        </ItemGroup>
        <PropertyGroup>
            <_JswinrtParameters>$(JsWinRTCommandVerbosity) $(JsWinRTParameters)</_JswinrtParameters>
            <_JswinrtParameters Condition="'$(JsWinRTTarget)' == 'ReactNative'">$(_JswinrtParameters) -reactnative</_JswinrtParameters>
            <_JswinrtParameters Condition="'$(JsWinRTTarget)' == 'NodeJS'">$(_JswinrtParameters) -nodejs</_JswinrtParameters>
            <_JswinrtParameters>$(_JswinrtParameters) @(_JswinrtInputs->'-in &quot;%(WinMDPath)&quot;', '&#x0d;&#x0a;')</_JswinrtParameters>
            <_JswinrtParameters>$(_JswinrtParameters) -out &quot;$(GeneratedFilesDir).&quot; -tsoutput &quot;$(TsOutDir).&quot; </_JswinrtParameters>
        </PropertyGroup>
        <!-- Always write the jswinrt.rsp file when the target runs, because the file is used as the output of this target. -->
        <WriteLinesToFile
            File="$(IntDir)jswinrt.rsp" Lines="$(_JswinrtParameters)"
            ContinueOnError="true" Overwrite="true" />
    </Target>

    <Target Name="RnWinRTMakeProjections"
          DependsOnTargets="JsWinRTMakeRsp"
          Inputs="$(IntDir)jswinrt.rsp"
          Outputs="$(GeneratedFilesDir)rnwinrt\Projections.g.h';$(GeneratedFilesDir)rnwinrt\Projections.g.cpp;$(GeneratedFilesDir)rnwinrt\ProjectedValueConverters.g.h';">
        <PropertyGroup>
            <RnWinRTPathCommand>&quot;$(JsWinRTExe)&quot; %40"$(IntDir)jswinrt.rsp"</RnWinRTPathCommand>
        </PropertyGroup>
        <Message Text="$(RnWinRTPathCommand)" Importance="$(JsWinRTVerbosity)" />
        <Exec Command="$(RnWinRTPathCommand)" />
    </Target>

    <!-- Generated files cannot be referenced for compile using $(GeneratedFilesDir)\rnwinrt\*.g.cpp because the list would not be
         reevaluated after code generation. This would cause clean builds to fail and incremental builds to use a potentially stale list. -->
    <Target Name="RnWinRTAddGeneratedCppFiles"
            DependsOnTargets="RnWinRTMakeProjections">
        <ItemGroup>
            <_FilesToBuild Remove="@(_FilesToBuild)"/>
            <_FilesToBuild Include="$(GeneratedFilesDir)rnwinrt\*.g.cpp"/>
        </ItemGroup>
        <ItemGroup>
            <ClCompile Include="@(_FilesToBuild)" />
            <FileWrites Include="@(_FilesToBuild)" />
        </ItemGroup>
        <Message Text="GeneratedCppFiles: @(_FilesToBuild)" Importance="$(JsWinRTVerbosity)" />
    </Target>

</Project>
